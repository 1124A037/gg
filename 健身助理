
# AI 智能健身助理系統

## 一、專案概述

本系統結合 Arduino 感測器硬體與 AI 智能分析，實時收集使用者的健身運動數據（運動動作、心率），並根據使用者身體狀態、健身目標及所在健身房設備，自動生成個人化訓練計劃與每日建議，協助使用者有效達成理想體態。

---

## 二、系統功能

| 模組        | 功能說明                           |
| --------- | ------------------------------ |
| 運動動作偵測    | 利用 MPU6050 感測器偵測健身動作次數及幅度      |
| 心率監控      | 監測使用者運動強度與疲勞狀態                 |
| 無線資料傳輸    | 透過藍牙模組將感測數據傳送至手機或後端系統          |
| AI 健身計劃生成 | 根據歷史數據與健身房設備，智能排定一週訓練菜單與今日訓練部位 |
| 訓練追蹤與回饋   | 提供即時訓練數據展示、目標進度提醒與成效分析         |

---

## 三、硬體架構

| 元件                    | 功能說明             |
| --------------------- | ---------------- |
| Arduino Nano / ESP32  | 控制核心，負責數據讀取與藍牙傳輸 |
| MPU6050               | 三軸加速度與陀螺儀，用於動作偵測 |
| Pulse Sensor          | 心率感測             |
| HC-05 / HC-06 / BLE模組 | 藍牙無線數據傳輸         |
| 鋰電池 + 充電模組            | 電力供應             |
| OLED 螢幕（選配）           | 顯示即時數據，如心率、動作次數  |

---

## 四、軟體架構

### 1. Arduino 端

* 感測器資料讀取（MPU6050、Pulse Sensor）
* 動作次數與心率資料即時處理
* 藍牙模組數據傳輸至手機或網頁前端

### 2. 手機 APP / 網頁端

* 接收並顯示即時運動數據（心率、動作計數）
* 用戶介面：今日訓練建議、歷史訓練紀錄、目標管理
* 藍牙連接管理

### 3. 後端系統

* API 伺服器（Node.js + Express）
* 資料庫（MongoDB）儲存用戶訓練數據與偏好
* AI 模型（TensorFlow\.js 或 Python TensorFlow）
  → 分析數據、生成個人化健身計劃與動態調整

---

## 五、系統流程圖

1. 使用者佩戴硬體裝置開始健身
2. Arduino 讀取感測器數據（運動次數、心率）
3. 藍牙將數據傳輸到手機 APP 或網頁前端
4. 前端即時顯示數據與今日訓練建議
5. 後端接收數據並更新歷史紀錄
6. AI 模型依據使用者數據生成或調整訓練菜單
7. 使用者參考建議完成訓練，持續優化循環

---

## 六、開發時程建議

| 階段             | 工作內容                        | 週數 |
| -------------- | --------------------------- | -- |
| 1. 硬體準備與感測器整合  | 購買元件、Arduino 程式撰寫、感測器校準     | 2  |
| 2. 藍牙資料傳輸開發    | 藍牙通信設計、手機/網頁端接收資料模組開發       | 2  |
| 3. 前端介面開發      | 運動數據展示、訓練菜單介面、用戶設定面板        | 3  |
| 4. 後端與 AI 模型開發 | API 設計、資料庫架構、AI 訓練計劃生成與動態調整 | 4  |
| 5. 系統整合測試      | 硬體與軟體整合、系統測試與優化             | 2  |
| 6. 使用者測試與優化    | 收集反饋、調整模型與介面                | 2  |

---

## 七、技術棧建議

| 類別    | 技術                                                        |
| ----- | --------------------------------------------------------- |
| 硬體    | Arduino Nano / ESP32, MPU6050, Pulse Sensor, HC-05/06/BLE |
| 程式語言  | C/C++（Arduino IDE）、JavaScript (React, Node.js)            |
| 前端框架  | React / React Native                                      |
| 後端框架  | Node.js + Express                                         |
| 資料庫   | MongoDB                                                   |
| AI 框架 | TensorFlow\.js / Python TensorFlow                        |

---

## 八、示範 Arduino 感測程式架構（簡化版）

```cpp
#include <Wire.h>
#include <MPU6050.h>
#include <PulseSensorPlayground.h>
#include <SoftwareSerial.h>

MPU6050 mpu;
const int pulsePin = A0;
PulseSensorPlayground pulseSensor;

SoftwareSerial BTSerial(10, 11); // RX, TX for HC-05

void setup() {
  Serial.begin(9600);
  BTSerial.begin(9600);

  Wire.begin();
  mpu.initialize();

  pulseSensor.analogInput(pulsePin);
  pulseSensor.begin();
}

void loop() {
  // 讀取加速度數據
  int16_t ax, ay, az;
  mpu.getAcceleration(&ax, &ay, &az);

  // 計算運動次數（簡化示例）
  static int stepCount = 0;
  if (abs(az) > 15000) {
    stepCount++;
  }

  // 讀取心率
  int heartRate = pulseSensor.getBeatsPerMinute();

  // 傳送資料格式: steps,heartRate
  String data = String(stepCount) + "," + String(heartRate);
  BTSerial.println(data);

  delay(1000); // 每秒更新
}
